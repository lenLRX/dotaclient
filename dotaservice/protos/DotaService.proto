syntax = "proto2";

import "dotaservice/protos/dota_gcmessages_common_bot_script.proto";
import "dotaservice/protos/dota_shared_enums.proto";
// import "google/protobuf/empty.proto";

enum Status {
  // From google/rpc/code.proto
  OK = 0;
  RESOURCE_EXHAUSTED = 8;
  FAILED_PRECONDITION = 9;
  OUT_OF_RANGE = 11;
  RADIANT_WIN = 12;
  DIRE_WIN = 13;
}

enum Team {
  TEAM_RADIANT = 2;
  TEAM_DIRE = 3;
}

enum HostMode {
  HOST_MODE_DEDICATED = 0;
  HOST_MODE_GUI = 1;
  HOST_MODE_GUI_MENU = 2;
}

message Empty {}

message Observation {
  required Status status = 1;
  optional Team team_id = 2;
  optional CMsgBotWorldState world_state = 3;
}

message InitialObservation {
  optional Status status = 1;
  optional CMsgBotWorldState world_state_radiant = 2;
  optional CMsgBotWorldState world_state_dire = 3;
}

message GameConfig {
  optional string game_id = 1;
  required uint32 ticks_per_observation = 3;
  // TODO(tzaman): Rework below, as host_mode impacts the settings (gui= timescale 1, no timeouts, etc)
  optional uint32 host_timescale = 2 [default = 1];
  optional HostMode host_mode = 5 [default = HOST_MODE_DEDICATED];
  optional DOTA_GameMode game_mode = 6 [default = DOTA_GAMEMODE_MO];
  // TODO(tzaman): Add hero picks for both teams in a priority repeated list.
}

message Actions {
  required CMsgBotWorldState.Actions actions = 1; 
  required Team team_id = 2;
}

message ObserveConfig {
  required Team team_id = 1;
}

service DotaService {
  rpc reset (GameConfig) returns (InitialObservation) {}  // TODO(tzaman): add version and hostname in response.
  rpc observe (ObserveConfig) returns (Observation) {}
  rpc act (Actions) returns (Empty) {}
}
